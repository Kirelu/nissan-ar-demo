# AR.js Nissan Model Demo - Customization Guide

This document provides instructions on how to customize the AR experience by changing the 3D model and marker image.

## How to Change the 3D Model

1. **Prepare Your 3D Model**:
   - Ensure your model is in GLTF/GLB format (.gltf or .glb)
   - Optimize your model for web (reduce polygons, texture sizes)
   - Place your model files in a folder within the project directory

2. **Update the HTML File**:
   - Open `index.html` in a text editor
   - Locate the asset section (around line 149-151):
     ```html
     <a-assets>
         <a-asset-item id="nissan-model" src="./nissan_skyline_r34_gtr_2002__www.vecarz.com/scene.gltf" crossorigin="anonymous" response-type="arraybuffer"></a-asset-item>
     </a-assets>
     ```
   - Change the `id` attribute if you want (optional)
   - Update the `src` attribute to point to your new model file path

3. **Adjust Model Properties** (if needed):
   - Find the model entity (around line 187-196):
     ```html
     <a-entity 
         position="0 1 0"
         scale="0.001 0.001 0.001"
         rotation="-90 0 0"
         gltf-model="#nissan-model"
         model-loaded
         shadow="cast: true; receive: true">
         <!-- Placeholder while model loads -->
         <a-box position="0 0 0" color="#777777" width="1" height="0.1" depth="1" visible="true"></a-box>
     </a-entity>
     ```
   - Modify the `position`, `scale`, and `rotation` attributes to fit your new model
   - If you changed the model ID, update the `gltf-model` attribute to match (e.g., `gltf-model="#your-new-id"`)

4. **Update Asset References** (if needed):
   - If you changed the model ID, also update any JavaScript references:
     - Check around line 125: `var model = document.querySelector('#nissan-model');`

## How to Change the Marker Image

This project uses the "hiro" preset marker. To use a custom marker:

1. **Create a Custom Marker**:
   - Generate a custom marker image using tools like:
     - AR.js Marker Training: https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html
     - AR.js Studio: https://ar-js-org.github.io/studio/
   - Save your marker image (JPG or PNG) in the project directory
   - Note the pattern file (.patt) generated by the marker creation tool

2. **Update the HTML File**:
   - Open `index.html` in a text editor
   - Locate the marker definition (around line 167):
     ```html
     <a-marker id="hiroMarker" preset="hiro">
         <a-entity id="markerAnchor"></a-entity>
     </a-marker>
     ```
   - Replace with your custom marker:
     ```html
     <a-marker id="customMarker" type="pattern" url="path/to/your-pattern-file.patt">
         <a-entity id="markerAnchor"></a-entity>
     </a-marker>
     ```

3. **Update Marker References**:
   - Find all references to the marker ID in the code
   - Update the marker-follow component (around line 172-173):
     ```html
     <a-entity id="markerContent" visible="false"
               marker-follow="markerId: hiroMarker; anchorId: markerAnchor">
     ```
   - Change to:
     ```html
     <a-entity id="markerContent" visible="false"
               marker-follow="markerId: customMarker; anchorId: markerAnchor">
     ```

## Testing Your Changes

1. Host the project on a web server (local or online)
2. Access the page using a mobile device with a camera
3. Point the camera at your marker to see the AR experience

## Troubleshooting

- If the model doesn't appear, check browser console for errors
- Ensure all file paths are correct
- Make sure your model is properly exported and compatible with A-Frame
- Test with different lighting conditions if marker detection is inconsistent

## Information Pages

The AR experience includes two buttons that link to information pages about the 3D model:

1. **English Information Page** (more-info-en.html)
   - Button labeled "More" links to this page
   - Contains detailed specifications and information in English

2. **Swedish Information Page** (mer-info-sv.html)
   - Button labeled "Mer" links to this page
   - Contains detailed specifications and information in Swedish

### How to Modify the Information Pages

1. Edit the HTML files directly:
   - `more-info-en.html` for English content
   - `mer-info-sv.html` for Swedish content

2. **Customize the Buttons**:
   - Locate the button section in `index.html` (around line 223-242):
     ```html
     <!-- Information buttons -->
     <a-entity position="0 0 -0.5">
         <!-- English button -->
         <a-entity position="-0.5 0 0">
             <a-plane color="#1a73e8" width="0.8" height="0.3" position="0 0 0" 
                      link-handler="url: more-info-en.html; title: More Information"
                      class="clickable">
                 <a-text value="More" align="center" color="white" position="0 0 0.001" width="2"></a-text>
             </a-plane>
         </a-entity>
         
         <!-- Swedish button -->
         <a-entity position="0.5 0 0">
             <a-plane color="#1a73e8" width="0.8" height="0.3" position="0 0 0" 
                      link-handler="url: mer-info-sv.html; title: Mer Information"
                      class="clickable">
                 <a-text value="Mer" align="center" color="white" position="0 0 0.001" width="2"></a-text>
             </a-plane>
         </a-entity>
     </a-entity>
     ```
   - Modify button positions, colors, sizes, or text as needed
   - Change the link destinations by updating the `url` attribute in the `link-handler` component
   - Make sure to keep the `class="clickable"` attribute for the raycaster to detect the buttons

3. **Understanding the Link Handler**:
   - The project uses a custom `link-handler` component (defined around line 117-139)
   - This component handles both click and touch events for better compatibility
   - The camera has a cursor and raycaster that detects elements with the `clickable` class
